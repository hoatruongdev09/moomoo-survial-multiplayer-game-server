'use strict';

let Mathf = require('../index');

//console.log(Mathf.lerp(300, 10, 0.6));
//console.log(Mathf.lerp(10, 300, 0.6));
//console.log(Mathf.lerp(20, 99, 0.6));
//console.log(Mathf.lerp(99, 20, 0.88));
//console.log(Mathf.lerp(33, 89, 0.24));
//console.log(Mathf.lerp(33, 89, 23));
//console.log(Mathf.lerp(99, 20, 23));
//console.log(Mathf.lerp(99, 20, -16));
//console.log(Mathf.lerp(99, 20, -16));

//console.log(Mathf.inverseLerp(4, 10, 8));
//console.log(Mathf.inverseLerp(5, 10, 1));
//console.log(Mathf.inverseLerp(5, 10, 200));
//console.log(Mathf.inverseLerp(5, 10, 6));
//console.log(Mathf.inverseLerp(10, 5, 6));
//console.log(Mathf.inverseLerp(-8, 10, -6));

//console.log(Mathf.closestPowerOfTwo(-1));
//console.log(Mathf.closestPowerOfTwo(0));
//console.log(Mathf.closestPowerOfTwo(1));
//console.log(Mathf.closestPowerOfTwo(19));
//console.log(Mathf.closestPowerOfTwo(7));
//console.log(Mathf.closestPowerOfTwo(23));
//console.log(Mathf.closestPowerOfTwo(24));
//
//console.log(Mathf.closestPowerOfTwo(370));
//console.log(Mathf.closestPowerOfTwo(360));
//console.log(Mathf.closestPowerOfTwo(383));
//console.log(Mathf.closestPowerOfTwo(4323245));
//console.log(Mathf.closestPowerOfTwoLong(4323245));

//console.log(Mathf.closestPowerOfTwoLong(38864542344));

//console.log(Mathf.deltaAngle(-180, -361));

//console.log(Mathf.lerpAngle(0, -179, 0.1));
//console.log(Mathf.lerpAngle(0, -179, 0.9));
//console.log(Mathf.lerpAngle(181, 361, 0.1));
//console.log(Mathf.lerpAngle(181, 361, 0.9));
//console.log(Mathf.lerpAngle(181, 539, 0.1));
//console.log (Mathf.lerpAngle(-320, 940, 0.9));
//console.log (Mathf.lerpAngle(-320, 580, 0.9));
//console.log (Mathf.lerpAngle(-320, 220, 0.9));
//console.log (Mathf.lerpAngle(-320, -140, 0.9));
//console.log (Mathf.lerpAngle(20, 40, 0.9));
//console.log (Mathf.lerpAngle(20, 40, 0.9));
//console.log (Mathf.lerpAngle(-40, -20, 0.9));
//console.log (Mathf.lerpAngle(-181, 539, 0.9));
//console.log (Mathf.lerpAngle(-10, -180, 0.9));
//console.log (Mathf.lerpAngle(170, -170, 0.9));
//console.log (Mathf.lerpAngle(200, 10, 0.9));
//console.log (Mathf.lerpAngle(200, 10, 1));
//console.log (Mathf.lerpAngle(10, 200, 0.9));
//console.log (Mathf.lerpAngle(10, 20, 0.9));
//console.log (Mathf.lerpAngle(120, 170, 0.9));
//console.log (Mathf.lerpAngle(170, -170, 1));
//console.log (Mathf.lerpAngle(-170, -170, 0.9));
//console.log (Mathf.lerpAngle(0, 0, 0.9));
//console.log (Mathf.lerpAngle(0, 1, 0.9));
//console.log (Mathf.lerpAngle(1, 0, 0.9));
//console.log (Mathf.lerpAngle(-1, 0, 0.9));
//console.log (Mathf.lerpAngle(0, -1, 0.9));
//console.log (Mathf.lerpAngle(-359, 359, 0.9));
//console.log (Mathf.lerpAngle(-349, 359, 0.9));
//console.log (Mathf.lerpAngle(948, 5276, 0.9));
//console.log (Mathf.lerpAngle(948, 5276, 1));
//console.log (Mathf.lerpAngle(948, 5456, 0.9));
//console.log (Mathf.lerpAngle(948, 5456, 1));
//console.log (Mathf.lerpAngle(5276, 948, 1));
//console.log (Mathf.lerpAngle(5456, 948, 1));
//console.log (Mathf.lerpAngle(-948, 5276, 0));
//console.log (Mathf.lerpAngle(-948, 5276, 0.1));
//console.log (Mathf.lerpAngle(-948, 5276, 0.9));
//console.log (Mathf.lerpAngle(-948, 5276, 1));

//console.log(Mathf.clamp(80, 9, 23));
//console.log(Mathf.clamp(80, 23, 9));
//var a = 100000;
//console.time('movetowards');
//while (a-- > 0) {
//  Mathf.moveTowards(9, 23, 80);
//  Mathf.moveTowards(9, 23, 100);
//  Mathf.moveTowards(9, 23, 101);
//  Mathf.moveTowards(9, 23, -80);
//  Mathf.moveTowards(9, 23, -100);
//  Mathf.moveTowards(9, 23, -101);
//  Mathf.moveTowards(23, 9, 80);
//  Mathf.moveTowards(23, 9, 100);
//  Mathf.moveTowards(23, 9, 101);
//  Mathf.moveTowards(23, 9, -80);
//  Mathf.moveTowards(23, 9, -100);
//  Mathf.moveTowards(23, 9, -101);
//  Mathf.moveTowards(15, -22, 80);
//  Mathf.moveTowards(15, -22, 100);
//  Mathf.moveTowards(15, -22, 101);
//  Mathf.moveTowards(15, -22, -80);
//  Mathf.moveTowards(15, -22, -100);
//  Mathf.moveTowards(15, -22, -101);
//  Mathf.moveTowards(9, 23, 8);
//  Mathf.moveTowards(9, 23, 10);
//  Mathf.moveTowards(9, 23, 11);
//  Mathf.moveTowards(9, 23, -8);
//  Mathf.moveTowards(9, 23, -10);
//  Mathf.moveTowards(9, 23, -11);
//  Mathf.moveTowards(23, 9, 8);
//  Mathf.moveTowards(23, 9, 10);
//  Mathf.moveTowards(23, 9, 11);
//  Mathf.moveTowards(23, 9, -8);
//  Mathf.moveTowards(23, 9, -10);
//  Mathf.moveTowards(23, 9, -11);
//  Mathf.moveTowards(15, -22, 8);
//  Mathf.moveTowards(15, -22, 10);
//  Mathf.moveTowards(15, -22, 11);
//  Mathf.moveTowards(15, -22, -8);
//  Mathf.moveTowards(15, -22, -10);
//  Mathf.moveTowards(15, -22, -11);
//}
//console.timeEnd('movetowards');
//console.log ('-------------0------------');
//console.log (Mathf.moveTowards(9, 23, 80));
//console.log (Mathf.moveTowards(9, 23, 100));
//console.log (Mathf.moveTowards(9, 23, 101));
//console.log ('-------------1------------');
//console.log (Mathf.moveTowards(9, 23, -80));
//console.log (Mathf.moveTowards(9, 23, -100));
//console.log (Mathf.moveTowards(9, 23, -101));
//console.log ('-------------2------------');
//console.log (Mathf.moveTowards(23, 9, 80));
//console.log (Mathf.moveTowards(23, 9, 100));
//console.log (Mathf.moveTowards(23, 9, 101));
//console.log ('-------------3------------');
//console.log (Mathf.moveTowards(23, 9, -80));
//console.log (Mathf.moveTowards(23, 9, -100));
//console.log (Mathf.moveTowards(23, 9, -101));
//console.log ('-------------4------------');
//console.log (Mathf.moveTowards(15, -22, 80));
//console.log (Mathf.moveTowards(15, -22, 100));
//console.log (Mathf.moveTowards(15, -22, 101));
//console.log ('-------------5------------');
//console.log (Mathf.moveTowards(15, -22, -80));
//console.log (Mathf.moveTowards(15, -22, -100));
//console.log (Mathf.moveTowards(15, -22, -101));
//
//console.log ('-------------0------------');
//console.log (Mathf.moveTowards(9, 23, 8));
//console.log (Mathf.moveTowards(9, 23, 10));
//console.log (Mathf.moveTowards(9, 23, 11));
//console.log ('-------------1------------');
//console.log (Mathf.moveTowards(9, 23, -8));
//console.log (Mathf.moveTowards(9, 23, -10));
//console.log (Mathf.moveTowards(9, 23, -11));
//console.log ('-------------2------------');
//console.log (Mathf.moveTowards(23, 9, 8));
//console.log (Mathf.moveTowards(23, 9, 10));
//console.log (Mathf.moveTowards(23, 9, 11));
//console.log ('-------------3------------');
//console.log (Mathf.moveTowards(23, 9, -8));
//console.log (Mathf.moveTowards(23, 9, -10));
//console.log (Mathf.moveTowards(23, 9, -11));
//console.log ('-------------4------------');
//console.log (Mathf.moveTowards(15, -22, 8));
//console.log (Mathf.moveTowards(15, -22, 10));
//console.log (Mathf.moveTowards(15, -22, 11));
//console.log ('-------------5------------');
//console.log (Mathf.moveTowards(15, -22, -8));
//console.log (Mathf.moveTowards(15, -22, -10));
//console.log (Mathf.moveTowards(15, -22, -11));

//console.log(Mathf.nextPowerOfTwo(7));
//console.log(Mathf.nextPowerOfTwo(19));
//console.log(Mathf.nextPowerOfTwo(32532532));

/*testPerf('pingpong', 100000, function() {
  console.log(Mathf.pingPong(-5, 3));
  console.log(Mathf.pingPong(-4, 3));
  console.log(Mathf.pingPong(-3, 3));
  console.log(Mathf.pingPong(-2, 3));
  console.log(Mathf.pingPong(-1, 3));
  console.log(Mathf.pingPong(0, 3));
  console.log(Mathf.pingPong(1, 3));
  console.log(Mathf.pingPong(2, 3));
  console.log(Mathf.pingPong(3, 3));
  console.log(Mathf.pingPong(4, 3));
  console.log(Mathf.pingPong(5, 3));
  console.log(Mathf.pingPong(6, 3));
  console.log(Mathf.pingPong(7, 3));
  console.log(Mathf.pingPong(8, 3));
  console.log(Mathf.pingPong(9, 3));
});*/

//function MathO() {
//  return Math;
//}

//MathO.abs = Math.abs;

//class MaO extends MathO {}

//var mao = new MaO();

//console.log(Mathf.smoothStep(10, 20, 0));
//console.log(Mathf.smoothStep(10, 20, 0.1));
//console.log(Mathf.smoothStep(10, 20, 0.2));
//console.log(Mathf.smoothStep(10, 20, 0.3));
//console.log(Mathf.smoothStep(10, 20, 0.4));
//console.log(Mathf.smoothStep(10, 20, 0.5));
//console.log(Mathf.smoothStep(10, 20, 0.6));
//console.log(Mathf.smoothStep(10, 20, 0.7));
//console.log(Mathf.smoothStep(10, 20, 0.8));
//console.log(Mathf.smoothStep(10, 20, 0.9));
//console.log(Mathf.smoothStep(10, 20, 1));

let rad = 2;

console.log(rad + ' radians are equal to ' + (rad * Mathf.Rad2Deg) + ' degrees');

function testPerf(name, times, fn) {
  var tmp = console.log;
  console.log = function(result) {
    return result;
  };
  console.time(name);
  while (times-- > 0) {
    fn();
  }
  console.log = tmp;
  console.timeEnd(name);
}
